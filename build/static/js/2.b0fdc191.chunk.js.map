{"version":3,"sources":["me/about.tsx","me/changePassword.tsx","me/tab.tsx"],"names":["about_About","react","[object Object]","this","showLogs","dist","push","header","logs","map","v","i","key","className","right","onClick","schema","name","type","required","uiSchema","items","orgPassword","widget","label","maxLength","placeholder","newPassword","newPassword1","submit","changePassword_ChangePasswordPage","onSubmit","context","tslib_es6","values","form","data","setValue","requiredFlag","onButtonClick","__webpack_exports__","about","changePassword","confirm","logout","user","rows","aboutRows","component","iconClass","icon","text","logOutRows","bk","exit","size","undefined","showLogin","consts","appIcon","main","discription","String","id"],"mappings":"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","file":"static/js/2.b0fdc191.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Page, nav } from 'tonva';\n\nexport class About extends React.Component {\n    private showLogs = () => {\n        nav.push(<Page header=\"Logs\">\n            <div>NODE_ENV: {process.env.NODE_ENV}</div>\n            {nav.logs.map((v,i) => {\n                return <div key={i} className=\"px-3 py-1\">{v}</div>;\n            })}\n        </Page>);\n    }\n\n    render() {\n        let right = <button className='btn btn-success btn-sm' onClick={this.showLogs}>log</button>;\n        return <Page header=\"关于MI投资\" right={right}>\n            <div className='m-3'>\n            MI投资\n            </div>\n        </Page>;\n    }\n}","import * as React from 'react';\nimport {Page, nav, Form, Context, Schema, UiSchema, UiPasswordItem} from 'tonva';\n//import center from './center';\n\nconst schema: Schema = [\n    {name:'orgPassword', type: 'string', required: true},\n    {name:'newPassword', type: 'string', required: true},\n    {name:'newPassword1', type: 'string', required: true},\n    {name: 'submit', type: 'submit'},\n];\n\nconst uiSchema: UiSchema = {\n    items: {\n        orgPassword: {\n            widget: 'password',\n            label: '原密码',\n            maxLength: 60,\n            placeholder: '输入原来的密码'\n        } as UiPasswordItem,\n        newPassword: {\n            widget: 'password',\n            label: '新密码',\n            maxLength: 60,\n            placeholder: '输入新设的密码'\n        } as UiPasswordItem,\n        newPassword1: {\n            widget: 'password',\n            label: '确认密码',\n            maxLength: 60,\n            placeholder: '再次输入新设密码'\n        } as UiPasswordItem,\n        submit: {\n            widget: 'button',\n            className: 'btn btn-primary',\n            label: '提交'\n        }\n    }\n}\n\nexport default class ChangePasswordPage extends React.Component {\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let values:any = context.form.data;\n        let {orgPassword, newPassword, newPassword1} = values;\n        if (newPassword !== newPassword1) {\n            context.setValue('newPassword', '');\n            context.setValue('newPassword1', '');\n            return '新密码错误，请重新输入';\n        }\n        let ret = false; //await center.changePassword({orgPassword: orgPassword, newPassword:newPassword});\n        if (ret === false) {\n            context.setValue('orgPassword', '');\n            return '原密码错误';\n        }\n        nav.replace(<Page header=\"修改密码\" back=\"close\">\n            <div className=\"m-3  text-success\">\n                密码修改成功！\n            </div>\n        </Page>);\n        return;\n    }\n    render() {\n        return <Page header=\"修改密码\">\n            <Form className=\"m-3\"\n                schema={schema} uiSchema={uiSchema}\n                requiredFlag={false}\n                onButtonClick={this.onSubmit} />\n        </Page>;\n    }\n}\n","import * as React from 'react';\nimport {nav, User, Page} from 'tonva';\nimport {Prop, Media, IconText, FA, PropGrid} from 'tonva';\nimport { consts } from '../consts';\nimport {About} from './about';\nimport ChangePasswordPage from './changePassword';\n\nclass Me extends React.Component {\n    private exit() {\n        if (confirm('退出当前账号不会删除任何历史数据，下次登录依然可以使用本账号')) {\n            nav.logout();\n        }\n    }\n\n    private about = () => nav.push(<About />);\n\n    private changePassword = () => {\n        nav.push(<ChangePasswordPage />);\n    }\n    render() {\n        const {user} = nav;\n        let aboutRows:Prop[] = [\n            '',\n            {\n                type: 'component',\n                component: <IconText iconClass=\"text-info\" icon=\"envelope\" text=\"关于MI投资\" />,\n                onClick: this.about\n            },\n            '',\n        ];\n\n        let logOutRows:Prop[] = [\n            '',\n            {\n                type: 'component',\n                bk: '',\n                component: <button className=\"btn btn-danger w-100\" onClick={this.exit}>\n                    <FA name=\"sign-out\" size=\"lg\" /> 退出登录\n                </button>\n            },\n        ];\n        let rows:Prop[];\n        if (user === undefined) {\n            rows = aboutRows;\n            rows.push('');\n            rows.push(\n                {\n                    type: 'component',\n                    component: <button className=\"btn btn-success w-100\" onClick={() => nav.showLogin()}>\n                        <FA name=\"sign-out\" size=\"lg\" /> 请登录\n                    </button>\n                },\n            );\n        }\n        else {\n            rows = [\n                '',\n                {\n                    type: 'component',\n                    component: <Media icon={consts.appIcon} main={user.name} discription={String(user.id)} />\n                },\n                '',\n                {\n                    type: 'component',\n                    component: <IconText iconClass=\"text-info\" icon=\"envelope\" text=\"修改密码\" />,\n                    onClick: this.changePassword\n                },\n            ]\n            rows.push(...aboutRows, ...logOutRows);\n        }\n        return <PropGrid rows={rows} values={{}} />;\n    }\n}\n\nexport default Me;"],"sourceRoot":""}