{"version":3,"sources":["consts.ts","images/logo.svg","me/index.tsx","ui/main.tsx","home/VSiteHeader.tsx","home/VSearchHeader.tsx","home/VHome.tsx","home/CHome.tsx","net/httpChannel.ts","net/httpChannelUI.ts","net/apiBase.ts","net/miApi.ts","ui/index.tsx","CMiApp.tsx","ui/mi/index.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","consts","uqBasedata","appIcon","miApiHost","miApiHostDebug","isDevelopment","module","exports","p","meTab","LoadableComponent","lib_default","loader","e","then","bind","loading","dist","react","color","selected","VSiteHeader_VSiteHeader","[object Object]","name","left","className","src","logo_default","a","alt","style","height","width","right","undefined","this","controller","renderSearchHeader","VSearchHeader_VSearchHeader","onSearch","key","tslib_es6","param","size","placeholder","LIGUOSHENG","VHome_VHome","renderSection","item","index","title","subtitle","content","page","Object","mobx_react_module","openMetaView","onPage","viewMetaButton","renderSiteHeader","isLogined","user","id","type","onClick","header","onScrollBottom","headerClassName","PageItems","items","render","renderRow","clickRow","rowKey","before","rowContent","assign","row","code","symbol","callOnSelected","onSelected","alert","CHome_HomePageItems","cHome","super","pageSize","firstSize","pageStart","result","cApp","miApi","Array","isArray","CHome_CHome","res","more","renderView","renderHome","tab","buildPageItems","vHome","first","httpChannel_HttpChannel","hostUrl","apiToken","ui","startWait","endWait","url","reject","showError","error","timeout","post","params","keys","length","c","k","options","buildOptions","method","innerFetch","body","JSON","stringify","resolve","that","path","buildError","err","channel","console","log","timeOutHandler","setTimeout","fetch","encodeURI","ok","clearTimeout","statusText","ct","headers","get","indexOf","json","retJson","catch","message","text","toLowerCase","startsWith","logout","u","Promise","language","culture","Headers","append","lang","httpChannelUI_HttpChannelNavUI","onError","apiBase_ApiBase","showWaiting","getHttpChannel","callFetch","put","delete","channelUIs","channelNoUIs","miApi_MiApi","basePath","apiName","uqToken","token","channels","channelUI","pbody","call","lodash_default","clone","push","src_ui","appName","CApp","miHost","NODE_ENV","PUBLIC_URL","REACT_APP_CENTER_HOST","REACT_APP_MIDATA_HOST","searchMain","showMain","initTabName","openVPage","VAppMain","vp","open","main","faceTabs","label","icon","notify","map","v","caption","tabs","openPage","uqs","bruce/mi","src_App_0","onLogined","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","react_dom","document","getElementById","URL","toString","origin","addEventListener","response","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dd560f17.chunk.js","sourcesContent":["export const consts = {\n    uqBasedata: \"bruce/mi\",\n    appIcon: 'http://101.200.46.56/imgs/Bear-icon.png',\n    miApiHost: 'http://106.14.213.254/',\n    miApiHostDebug: 'http://localhost:6010/',\n    isDevelopment: process.env.NODE_ENV === 'development',\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from 'react';\nimport Loadable from 'react-loadable';\nimport { Loading } from 'tonva';\n\nexport const meTab = () => {\n    let LoadableComponent = Loadable({\n        loader: () => import('./tab'),\n        loading: Loading\n    });\n    return <LoadableComponent />;\n}\n","import * as React from 'react';\nimport { VPage, TabCaptionComponent, Page, Tabs } from 'tonva';\nimport { CMiApp } from '../CMiApp';\nimport { observable } from 'mobx';\nimport { meTab } from '../me';\n\nexport const store = {\n    //homeCount: observable.box<number>(-1),\n    //cartCount: observable.box<number>(101),\n};\n\nconst color = (selected: boolean) => selected === true ? 'text-primary' : 'text-muted';\n\nexport class VHome extends VPage<CMiApp> {\n    async open(param?: any) {\n        this.openPage(this.render);\n    }\n    render = (param?: any): JSX.Element => {\n        let { cHome } = this.controller;\n        let faceTabs = [\n            { name: 'home', label: '首页', icon: 'home', content: cHome.tab, notify: undefined/*store.homeCount*/ },\n            { name: 'me', label: '我的', icon: 'user', content: meTab }\n        ].map(v => {\n            let { name, label, icon, content, notify } = v;\n            return {\n                name: name,\n                caption: (selected: boolean) => TabCaptionComponent(label, icon, color(selected)),\n                content: content,\n                notify: notify,\n            }\n        });\n        return <Page header={false}>\n            <Tabs tabs={faceTabs} />\n        </Page>;\n    }\n}\n","import * as React from 'react';\nimport { View, nav } from 'tonva';\nimport { LMR, FA, SearchBox } from 'tonva';\nimport logo from '../images/logo.svg';\nimport { CHome } from './CHome';\n\nexport class VSiteHeader extends View<CHome> {\n    render() {\n        let currentSalesRegion = <FA name=\"globe\" />\n        let login = <div>\n            登录\n        </div>\n        let left = <img className=\"m-1\" src={logo} alt=\"logo\" style={{height: \"3rem\", width: \"3rem\"}} />;\n        //let cart = this.controller.cApp.cCart.renderCartLabel();\n        let right = undefined;\n        /*\n        <div className=\"d-flex flex-row mr-1 align-items-center\">\n            {currentSalesRegion} &nbsp;\n            <button onClick={()=>nav.start()}>Try</button>\n        </div>;*/\n        return <LMR\n            className=\"mb-3 align-items-center bg-white\"\n            left={left} right={right}>\n            <div className=\"\">\n                {this.controller.renderSearchHeader('md')}\n            </div>\n        </LMR>\n    }\n}","import * as React from 'react';\nimport { View } from 'tonva';\nimport { CHome } from './CHome';\nimport { SearchBox } from 'tonva';\n\nexport class VSearchHeader extends View<CHome> {\n\n    private onSearch = async (key: string) => {\n        // let { cProduct } = this.controller.cApp;\n        // cProduct.start(key);\n    }\n\n    render(param: any) {\n        return <SearchBox className=\"px-1 w-100\" \n            size={param}\n            onSearch={this.onSearch} \n            placeholder=\"功能...\" />\n    }\n}","import * as React from 'react';\nimport { VPage, Page, View, List, LMR } from 'tonva';\nimport { observer } from 'mobx-react';\nimport { CHome } from './CHome';\nimport {observable, IObservableArray, computed} from 'mobx';\n\nconst LIGUOSHENG = 5;\n\ninterface CatItem {\n  title: string;\n  sub: string[];\n  img: string;\n}\n\ninterface Cat {\n  caption: string;\n  items?: CatItem[];\n}\n\nconst catItemStyle: React.CSSProperties = {\n  width: '12rem',\n  //height: '6rem', \n  overflow: 'hidden',\n};\nconst subStyle: React.CSSProperties = {\n  fontSize: '0.75rem',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n};\nconst imgStyle: React.CSSProperties = {\n  //float:'left', clear:'both', \n  height: '1.5rem', width: '1.5rem', opacity: 0.1,\n  marginRight: '0.5rem',\n};\n\nexport class VHome extends View<CHome> {\n  async open(param?: any) {\n    //await this.controller.searchMain('');\n    //this.openPage(this.page);\n  }\n\n  private renderSection = (item: any, index: number) => {\n    return <section>\n      <h4>{item.title}<small className=\"text-muted\">{item.subtitle}</small></h4>\n      <p>{item.content}</p>\n    </section>\n  }\n\n  render(param: any): JSX.Element {\n    return <this.page />\n  }\n\n  private page = observer(() => {\n    let { openMetaView, onPage } = this.controller;\n    let header = this.controller.renderSiteHeader();\n    let viewMetaButton = <></>;\n    if (this.controller.isLogined && this.controller.user.id === LIGUOSHENG) {\n      viewMetaButton = <button type=\"button\" className=\"btn w-100\" onClick={openMetaView}>view</button>\n    }\n\n    return <Page header=\"ddddd\"  onScrollBottom={onPage} \n      headerClassName='bg-primary py-1 px-3'>\n      \n      <this.content />\n    </Page>;\n  })\n\n  private content = observer(() => {\n    let {renderSiteHeader, PageItems} = this.controller;\n    //let siteHeader = this.controller.renderSiteHeader();\n    /*\n    let items = observable.array<any>([], {deep:true});\n    if (this.controller.PageItems !== undefined) {\n      items = this.controller.PageItems.items;\n    }\n    */\n    return <>\n      <List\n        items={PageItems.items}\n        item={{ render: this.renderRow, onClick: this.clickRow, key: this.rowKey }}\n        before={'搜索' + ' ' + '资料'}\n      />\n    </>\n  });\n\n  renderRow = (item: any, index: number): JSX.Element => <this.rowContent {...item} />;\n\n  protected rowContent = (row: any): JSX.Element => {\n    let { id, name, code, symbol } = row;\n    return <LMR className=\"px-3 py-2\" left={name} right = {id}>\n      <div className=\"px-3\"> {symbol}</div>\n    </LMR>\n  }\n\n  private rowKey = (item: any) => {\n    let { id } = item;\n    return id;\n  }\n\n  protected async onSelected(item: any): Promise<void> {\n\n  }\n\n  private callOnSelected(item: any) {\n    if (this.onSelected === undefined) {\n      alert('onSelect is undefined');\n      return;\n    }\n    this.onSelected(item);\n  }\n  clickRow = (item: any) => {\n    this.callOnSelected(item);\n  }\n}","import * as React from 'react';\nimport { CTuidMain, nav } from 'tonva';\nimport { VSiteHeader } from './VSiteHeader';\nimport { CMiApp } from '../CMiApp';\nimport { PageItems, Controller } from 'tonva';\nimport { VSearchHeader } from './VSearchHeader';\nimport { VHome } from './VHome';\n\nclass HomePageItems<T> extends PageItems<T> {\n    cHome: CHome;\n    constructor(cHome: CHome) {\n        super(true);\n        this.cHome = cHome;\n        this.pageSize = 30;\n        this.firstSize = 30;\n    }\n    protected async load(param: any, pageStart: any, pageSize: number): Promise<any[]> {\n        let result = await this.cHome.cApp.miApi.page('q_stocksquery', [], pageStart, pageSize);\n        if (Array.isArray(result) === false) return [];\n        return result as any[];\n    }\n    protected setPageStart(item: any) {\n        this.pageStart = item === undefined ? 0 : item.id;\n    }\n}\n\nexport class CHome extends Controller {\n    PageItems: PageItems<any>;\n\n    cApp: CMiApp;\n\n    vHome: VHome;\n\n    constructor(cApp: CMiApp, res: any) {\n        super(res);\n\n        this.buildPageItems();\n        this.cApp = cApp;\n        this.vHome = new VHome(this);\n    }\n\n    protected buildPageItems(): PageItems<any> {\n        return this.PageItems = new HomePageItems<any>(this);\n    }\n\n    onPage = () => {\n        this.PageItems.more();\n    }\n\n    async searchMain(key: string) {\n        if (this.PageItems === undefined) {\n            this.PageItems = this.buildPageItems();\n        }\n        if (key !== undefined) await this.PageItems.first(key);\n    }\n\n    async internalStart(param: any) {\n        //this.openVPage(VHome);\n    }\n\n    renderSiteHeader = () => {\n        return this.renderView(VSiteHeader);\n    }\n\n    renderSearchHeader = (size?: string) => {\n        return this.renderView(VSearchHeader, size);\n    }\n\n    \n    renderHome = () => {\n        //return this.vHome.render(undefined);\n        return this.renderView(VHome);\n    }\n    \n\n    openMetaView = () => {\n    }\n\n    tab = () => <this.renderHome />;\n}","import {FetchError} from './fetchError';\nimport {HttpChannelUI} from './httpChannelUI';\nimport {nav} from 'tonva';\nimport { consts } from '../consts';\n\nexport async function httpGet(url:string, params?:any):Promise<any> {\n    let channel = new HttpChannel(url, undefined, undefined);\n    let ret = await channel.get('', params);\n    return ret;\n}\n\nexport async function httpPost(url:string, params?:any):Promise<any> {\n    let channel = new HttpChannel(url, undefined, undefined);\n    let ret = await channel.post('', params);\n    return ret;\n}\n\nexport class HttpChannel {\n    private hostUrl: string;\n    private apiToken: string;\n    private ui?: HttpChannelUI;\n    private timeout: number;\n\n    constructor(hostUrl: string, apiToken:string, ui?: HttpChannelUI) {\n        this.hostUrl = hostUrl;\n        this.apiToken = apiToken;\n        this.ui = ui;\n        this.timeout = consts.isDevelopment === true? 500000:5000;\n    }\n\n    private startWait = () => {\n        if (this.ui !== undefined) this.ui.startWait();\n    }\n\n    private endWait = (url?:string, reject?:(reason?:any)=>void) => {\n        if (this.ui !== undefined) this.ui.endWait();\n        if (reject !== undefined) reject('访问webapi超时 ' + url);\n    }\n\n    private showError = async (error:FetchError) => {\n        if (this.ui !== undefined) await this.ui.showError(error);\n    }\n\n    used() {\n        this.post('', {});\n    }\n\n    async get(url: string, params: any = undefined): Promise<any> {\n        if (params) {\n            let keys = Object.keys(params);\n            if (keys.length > 0) {\n                let c = '?';\n                for (let k of keys) {\n                    let v = params[k];\n                    if (v === undefined) continue;\n                    url += c + k + '=' + params[k];\n                    c = '&';\n                }\n            }\n        }\n        let options = this.buildOptions();\n        options.method = 'GET';\n        return await this.innerFetch(url, options);\n    }\n\n    async post(url: string, params: any): Promise<any> {\n        let options = this.buildOptions();\n        options.method = 'POST';\n        options.body = JSON.stringify(params);\n        return await this.innerFetch(url, options);\n    }\n\n    async put(url: string, params: any): Promise<any> {\n        let options = this.buildOptions();\n        options.method = 'PUT';\n        options.body = JSON.stringify(params);\n        return await this.innerFetch(url, options);\n    }\n\n    async delete(url: string, params: any): Promise<any> {\n        let options = this.buildOptions();\n        options.method = 'DELETE';\n        options.body = JSON.stringify(params);\n        return await this.innerFetch(url, options);\n    }\n    async fetch(url: string, options: any, resolve:(value?:any)=>any, reject:(reason?:any)=>void):Promise<void> {\n        let that = this;\n        this.startWait();\n        let path = url;\n        function buildError(err: string) {\n            return {\n                channel: that,\n                url: path,\n                options: options,\n                resolve: resolve,\n                reject: reject,\n                error: err,\n            }\n        }\n        try {\n            console.log('%s %s', options.method, path);\n            let timeOutHandler = setTimeout(() => that.endWait(url, reject), this.timeout);\n            let res = await fetch(encodeURI(path), options);\n            if (res.ok === false) {\n                clearTimeout(timeOutHandler);\n                that.endWait();\n                console.log('call error %s', res.statusText);\n                throw res.statusText;\n            }\n            let ct = res.headers.get('content-type');\n            if (ct && ct.indexOf('json')>=0) {\n                return res.json().then(async retJson => {\n                    clearTimeout(timeOutHandler);\n                    that.endWait();\n                    if (retJson.ok === true) {\n                        return resolve(retJson.res);\n                    }\n                    if (retJson.error === undefined) {\n                        await that.showError(buildError('not valid tonva json'));\n                    }\n                    else {\n                        await that.showError(buildError(retJson.error));\n                        reject(retJson.error);\n                    }\n                    //throw retJson.error;\n                }).catch(async error => {\n                    await that.showError(buildError(error.message));\n                });\n            }\n            else {\n                let text = await res.text();\n                clearTimeout(timeOutHandler);\n                that.endWait();\n                resolve(text);\n            }\n        }\n        catch(error) {\n            if (typeof error === 'string') {\n                if (error.toLowerCase().startsWith('unauthorized') === true) {\n                    nav.logout();\n                    return;\n                }\n            }\n            await this.showError(buildError(error.message));\n        };\n    }\n\n    private async innerFetch(url: string, options: any): Promise<any> {\n        let u = this.hostUrl + url;\n        return await new Promise<any>(async (resolve, reject) => {\n            await this.fetch(u, options, resolve, reject);\n        });\n    }\n\n    async callFetch(url:string, method:string, body:any):Promise<any> {\n        let options = this.buildOptions();\n        options.method = method;\n        options.body = body;\n        return await new Promise<any>(async (resolve, reject) => {\n            await this.fetch(url, options, resolve, reject);\n        });\n    }\n\n    private buildOptions(): any {\n        let {language, culture} = nav;\n        let headers = new Headers();\n        //headers.append('Access-Control-Allow-Origin', '*');\n        headers.append('Content-Type', 'application/json;charset=UTF-8');\n        let lang = language;\n        if (culture) lang += '-' + culture;\n        headers.append('Accept-Language', lang);\n        if (this.apiToken) { \n            headers.append('Authorization', this.apiToken); \n        }\n        let options = {\n            headers: headers,\n            // cache: 'no-cache',\n        };\n        return options;\n    }\n}\n","import {nav} from 'tonva';\n\nexport interface HttpChannelUI {\n    startWait():void;\n    endWait():void;\n    showError(error:any):Promise<void>;\n}\n\nexport class HttpChannelNavUI implements HttpChannelUI {\n    startWait() {\n        nav.startWait();\n    }\n    endWait() {\n        nav.endWait();\n    }\n    async showError(error:any):Promise<void> {\n        nav.endWait();\n        /*\n        if (error.name === 'SyntaxError') {\n            error = {\n                name: error.name,\n                message: error.message,\n            }\n        }*/\n        await nav.onError(error);\n    }\n}\n\n","//import {isDevelopment} from '../local';\nimport {HttpChannel} from './httpChannel';\n\nexport async function refetchApi(channel:HttpChannel, url, options, resolve, reject) {\n    await channel.fetch(url, options, resolve, reject);\n}\n\nexport abstract class ApiBase {\n    protected token: string;\n    protected path: string;\n    protected showWaiting: boolean;\n\n    constructor(path: string, showWaiting: boolean) {\n        this.path = path || '';\n        this.showWaiting = showWaiting;\n    }\n\n    protected abstract async getHttpChannel(): Promise<HttpChannel>;\n\n    public async call(url:string, method:string, body:any):Promise<any> {\n        let channel = await this.getHttpChannel();\n        return await channel.callFetch(url, method, body);\n    }\n\n    public async get(path:string, params:any=undefined): Promise<any> {\n        let channel = await this.getHttpChannel();\n        return await channel.get(this.path + path, params);\n    }\n\n    public async post(path:string, params:any): Promise<any> {\n        let channel = await this.getHttpChannel();\n        return await channel.post(this.path + path, params);\n    }\n\n    public async put(path:string, params:any): Promise<any> {\n        let channel = await this.getHttpChannel();\n        return await channel.put(this.path + path, params);\n    }\n\n    public async delete(path:string, params:any): Promise<any> {\n        let channel = await this.getHttpChannel();\n        return await channel.delete(this.path + path, params);\n    }\n}\n","import _ from 'lodash';\nimport { HttpChannel } from './httpChannel';\nimport { HttpChannelNavUI } from './httpChannelUI';\nimport { ApiBase } from './apiBase';\n\nlet channelUIs: { [name: string]: HttpChannel } = {};\nlet channelNoUIs: { [name: string]: HttpChannel } = {};\n\nexport class MiApi extends ApiBase {\n  private apiName: string;\n  url: string;\n\n  constructor(url:string, basePath: string, apiName:string, uqToken: string, showWaiting?: boolean) {\n    super(basePath, showWaiting);\n    this.showWaiting = showWaiting;\n    this.apiName = apiName;\n    this.token = uqToken;\n    this.url = url;\n  }\n\n  protected async getHttpChannel(): Promise<HttpChannel> {\n    let channels: { [name: string]: HttpChannel };\n    let channelUI: HttpChannelNavUI;\n    if (this.showWaiting === true || this.showWaiting === undefined) {\n      channels = channelUIs;\n      channelUI = new HttpChannelNavUI();\n    }\n    else {\n      channels = channelNoUIs;\n    }\n    let channel = channels[this.apiName];\n    if (channel !== undefined) return channel;\n    channel = new HttpChannel(this.url, this.token, channelUI);\n    return channels[this.apiName] = channel;\n  }\n\n  async query(name: string, params: any[]): Promise<any> {\n    let pbody = { call:name, params:params };\n    let ret = await this.post('sql/call', pbody);\n    return ret;\n  }\n\n  async page(name: string, params: any[], pageStart: number, pageSize: number): Promise<any> {\n    let p: any[];\n    switch (typeof params) {\n      case 'undefined': p = []; break;\n      default: p = _.clone(params); break;\n    }\n    p.push(pageStart);\n    p.push(pageSize);\n    let pbody = { call:name, params:p };\n    return await this.post('sql/call', pbody);\n  }\n}\n","import { AppUI, CApp } from \"tonva\";\nimport { VHome } from './main';\nimport { CMiApp } from '../CMiApp';\nimport miUI from './mi';\n\nconst ui: AppUI = {\n    appName: \"bruce/mi\",\n    CApp: CMiApp,\n    main: VHome,\n    uqs: {\n        'bruce/mi': miUI\n    }\n}\n\nexport default ui;\n","import * as React from 'react';\nimport { CApp, CUq, Controller, VPage } from 'tonva';\nimport { CHome } from './home/CHome';\nimport { consts } from './consts';\nimport { MiApi } from './net/miApi';\nimport {nav} from 'tonva';\n\nexport class CMiApp extends CApp {\n  cHome: CHome;\n  miApi: MiApi;\n\n  protected async internalStart() {\n    if (this.isLogined) {\n    }\n\n    let n = nav;\n\n    let token = this.user.token;\n\n    let miHost = consts.isDevelopment ? consts.miApiHostDebug : consts.miApiHost;\n    this.miApi = new MiApi(miHost, 'fsjs/', 'miapi', token, false);\n    this.cHome = new CHome(this, undefined);\n    let params = [];\n    //let ret = await this.miApi.page('q_stocksquery', params, 0, 100);\n    let env = process.env;\n    this.cHome.searchMain('');\n    this.showMain();\n  }\n\n  showMain(initTabName?: string) {\n    this.openVPage(this.VAppMain, initTabName);\n  }\n\n  public async showOneVPage(vp: new (coordinator: Controller) => VPage<Controller>, param?: any): Promise<void> {\n    await (new vp(this)).open(param);\n  }\n\n  protected onDispose() {\n  }\n}\n","import { UqUI } from 'tonva';\n\nconst uqUI:UqUI = {\n}\n\n\nconst uqUIs = uqUI;\n/*\n{\n    $: uqUI,\n    \"aa-bb\": aa_BB_UsqUI,\n}\n*/\nexport default uqUIs;\n","import * as React from 'react';\nimport './App.css';\nimport { NavView, nav, Page, Tabs } from 'tonva';\nimport { startApp } from 'tonva';\nimport ui from './ui';\n//import { faceTabs } from 'facetabs';\n\nclass App extends React.Component {\n\n  private onLogined = async () => {\n    await startApp(ui);\n    /*\n    let page = <Page header={false}>\n      <Tabs tabs={faceTabs} />\n    </Page>\n    nav.push(page);\n    */\n    //let b = new B('b');\n    //await b.d();\n    //nav.push(<div>ddd</div>)\n  }\n  public render() {\n    return <NavView onLogined={this.onLogined} />\n  }\n}\n\nexport default App;","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}